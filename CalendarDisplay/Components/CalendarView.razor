@namespace CalendarDisplay.Components
@inject ICalendarViewModel viewModel

<div class="calendar-wrapper">
    <span class="calendar-title">@viewModel.CurrentDateTime.LocalTime.ToString("dddd, MMMM d, yyyy - h:mm:ss tt - Hmm")</span>

    @if (viewModel.Grid is null)
    {
        <div class="calendar-cell"><em>Loading calendar...</em></div>
    }
    else
    {
        <div class="calendar-cell-header">Sunday</div>
        <div class="calendar-cell-header">Monday</div>
        <div class="calendar-cell-header">Tuesday</div>
        <div class="calendar-cell-header">Wednesday</div>
        <div class="calendar-cell-header">Thursday</div>
        <div class="calendar-cell-header">Friday</div>
        <div class="calendar-cell-header">Saturday</div>

        @foreach (var week in viewModel.Grid.CalendarWeeks)
        {
            @foreach (var day in week.Days)
            {
                <div class="@(day.Day.Month == viewModel.CurrentDateTime.LocalTime.Month && day.Day.Day == viewModel.CurrentDateTime.LocalTime.Day
                                ? "calendar-cell-primary"
                                : day.Day.Month == viewModel.CurrentDateTime.LocalTime.Month
                                    ? "calendar-cell"
                                    : "calendar-cell-secondary")">

                    <div class="calendar-cell-inner">
                        <span class="calendar-sub-cell-day text-sm-left">@day.Day.Day</span>
                        @foreach (var e in day.Events.OrderByDescending(e => e.AllDay).ThenBy(e => e.Start))
                        {
                            <div class="calendar-cell-event truncate" style="background-color: @(e.BackgroundColor); color: @(e.TextColor);">
                                @if (e.Recurring)
                                {
                                    <span class="oi oi-timer"></span>
                                }
                                @e.ToString()
                            </div>
                        }
                    </div>

                </div>
            }
        }
    }

</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        await viewModel.InitAsync(StateHasChanged);
    }
}